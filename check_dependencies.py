#!/usr/bin/env python3
"""
Script para verificar a compatibilidade das depend√™ncias do CrossDebate.
"""
import sys
import subprocess
import re
import argparse
from pathlib import Path
import importlib
import importlib.util
import logging
from typing import Dict, List, Tuple, Set, Optional

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger("dependency-checker")

# Define core dependencies that are absolutely required
CORE_DEPENDENCIES = [
    "numpy",
    "pandas",
    "plotly",
    "networkx",
    "matplotlib",
    "fastapi",
    "uvicorn",
    "sqlalchemy",
]

def get_installed_packages():
    """Retorna um dicion√°rio com os pacotes instalados e suas vers√µes."""
    result = subprocess.run(
        [sys.executable, "-m", "pip", "list", "--format=json"],
        capture_output=True,
        text=True,
        check=True,
    )
    import json
    packages = json.loads(result.stdout)
    return {pkg["name"].lower(): pkg["version"] for pkg in packages}

def analyze_version_conflicts(requirements: List[Tuple[str, Optional[str]]]) -> Dict[str, List[str]]:
    """Analisa conflitos de vers√£o entre depend√™ncias."""
    conflicts = {}
    package_versions = {}
    
    # Agrupa requisitos por pacote
    for package, version_constraint in requirements:
        if package not in package_versions:
            package_versions[package] = []
        if version_constraint:
            package_versions[package].append(version_constraint)
    
    # Verifica conflitos
    for package, versions in package_versions.items():
        if len(versions) > 1:
            conflicts[package] = versions
    
    return conflicts

def resolve_version_conflicts(conflicts: Dict[str, List[str]]) -> Dict[str, str]:
    """Resolve conflitos de vers√£o, escolhendo a vers√£o mais recente compat√≠vel."""
    resolutions = {}
    
    for package, constraints in conflicts.items():
        # L√≥gica simplificada: apenas usa o √∫ltimo constraint listado
        # Em um cen√°rio real, usar√≠amos algo como packaging.version para comparar
        # e resolver vers√µes compat√≠veis
        resolutions[package] = constraints[-1]
        logger.warning(f"‚ö†Ô∏è Conflito de vers√£o para {package}: {', '.join(constraints)}")
        logger.info(f"   Resolvido para: {package}{constraints[-1]}")
    
    return resolutions

def get_requirements(file_path, include_viz_libs=False):
    """Extrai requisitos do arquivo requirements.txt."""
    requirements = []
    path = Path(file_path)
    
    # Bibliotecas de visualiza√ß√£o necess√°rias para js/visualization/AdvancedVisualization.js
    viz_libraries = [
        ("plotly", None),
        ("pandas", None),
        ("numpy", None),
        ("networkx", None),
        ("vega", None),
        ("altair", None),  # Python interface para Vega/Vega-Lite
    ]
    
    if not path.exists():
        print(f"ERRO: Arquivo {file_path} n√£o encontrado.")
        if include_viz_libs:
            return viz_libraries
        return []
    
    with open(path, "r") as f:
        for line in f:
            line = line.strip()
            # Ignora coment√°rios e linhas vazias
            if not line or line.startswith("#"):
                continue
            # Extrai nome e vers√£o
            match = re.match(r"([a-zA-Z0-9_\-]+)([<>=]=?[0-9\.]+)?", line)
            if match:
                package_name = match.group(1).lower()
                version_constraint = match.group(2) if len(match.groups()) > 1 else None
                requirements.append((package_name, version_constraint))
    
    # Adiciona bibliotecas de visualiza√ß√£o se solicitado
    if include_viz_libs:
        # Verifica se as bibliotecas de visualiza√ß√£o j√° est√£o nos requisitos
        existing_packages = {req[0] for req in requirements}
        for viz_lib, version in viz_libraries:
            if viz_lib not in existing_packages:
                requirements.append((viz_lib, version))
    
    return requirements

def create_minimal_requirements(input_file, output_file):
    """Cria um arquivo de requisitos m√≠nimos com apenas as depend√™ncias essenciais."""
    requirements = get_requirements(input_file)
    
    # Filtra apenas depend√™ncias essenciais
    minimal_reqs = []
    for pkg, version in requirements:
        if pkg.lower() in [d.lower() for d in CORE_DEPENDENCIES]:
            minimal_reqs.append((pkg, version))
    
    # Adiciona depend√™ncias de visualiza√ß√£o b√°sicas
    viz_libs = ["plotly", "pandas", "numpy", "networkx"]
    existing = {req[0].lower() for req in minimal_reqs}
    for lib in viz_libs:
        if lib.lower() not in existing:
            minimal_reqs.append((lib, None))
    
    # Escreve arquivo
    with open(output_file, "w") as f:
        f.write("# Depend√™ncias m√≠nimas para funcionalidade b√°sica do CrossDebate\n")
        for pkg, version in minimal_reqs:
            if version:
                f.write(f"{pkg}{version}\n")
            else:
                f.write(f"{pkg}\n")
    
    logger.info(f"‚úÖ Arquivo de requisitos m√≠nimos criado: {output_file}")
    return minimal_reqs

def update_requirements_file(file_path, conflicts_resolution=None):
    """Atualiza o arquivo requirements.txt com vers√µes resolvidas e ordenadas."""
    requirements = get_requirements(file_path)
    
    # Remove duplicatas, mantendo o √∫ltimo
    unique_reqs = {}
    for pkg, version in requirements:
        unique_reqs[pkg.lower()] = version
    
    # Aplica resolu√ß√µes de conflito
    if conflicts_resolution:
        for pkg, resolved_version in conflicts_resolution.items():
            unique_reqs[pkg.lower()] = resolved_version
    
    # Ordena alfabeticamente
    sorted_reqs = sorted(unique_reqs.items(), key=lambda x: x[0])
    
    # Escreve arquivo atualizado
    with open(file_path, "w") as f:
        f.write("# CrossDebate dependencies\n")
        f.write("# Generated by check_dependencies.py\n\n")
        
        for pkg, version in sorted_reqs:
            if version:
                f.write(f"{pkg}{version}\n")
            else:
                f.write(f"{pkg}\n")
    
    logger.info(f"‚úÖ Arquivo de requisitos atualizado: {file_path}")
    return sorted_reqs

def check_import(package_name):
    """Verifica se um pacote pode ser importado."""
    try:
        importlib.import_module(package_name)
        return True
    except ImportError:
        return False

def create_viz_requirements_file(file_path):
    """Cria um arquivo requirements-viz.txt com as depend√™ncias de visualiza√ß√£o."""
    viz_libraries = [
        "plotly",
        "pandas",
        "numpy",
        "networkx",
        "vega",
        "altair",  # Python interface para Vega/Vega-Lite
    ]
    
    with open(file_path, "w") as f:
        f.write("# Depend√™ncias para visualiza√ß√µes avan√ßadas (D3.js, Plotly, Vega)\n")
        for lib in viz_libraries:
            f.write(f"{lib}\n")
    
    print(f"‚úÖ Arquivo de depend√™ncias de visualiza√ß√£o criado: {file_path}")

def run_tests():
    """Executa os testes do sistema para garantir a compatibilidade."""
    print("\nüîç Executando testes do sistema...")
    
    try:
        # Determinar o diret√≥rio de testes
        root_dir = Path(__file__).parent
        test_dir = root_dir / "tests"
        
        if not test_dir.exists():
            print(f"‚ùå Diret√≥rio de testes n√£o encontrado: {test_dir}")
            return False
        
        # Executar testes usando unittest ou pytest, dependendo do que estiver dispon√≠vel
        if check_import("pytest"):
            print("Executando testes com pytest...")
            result = subprocess.run(
                [sys.executable, "-m", "pytest", str(test_dir)],
                capture_output=True,
                text=True,
            )
        else:
            print("Executando testes com unittest...")
            result = subprocess.run(
                [sys.executable, "-m", "unittest", "discover", "-s", str(test_dir)],
                capture_output=True,
                text=True,
            )
        
        # Exibir resultados dos testes
        print("\n--- Resultado dos Testes ---")
        print(result.stdout)
        
        if result.returncode == 0:
            print("\n‚úÖ Todos os testes passaram com sucesso!")
            return True
        else:
            print("\n‚ùå Alguns testes falharam. Verifique os erros acima.")
            if result.stderr:
                print("\nErros:")
                print(result.stderr)
            return False
            
    except Exception as e:
        print(f"\n‚ùå Erro ao executar os testes: {str(e)}")
        return False

def install_dependencies(requirements_file, upgrade=False):
    """Instala as depend√™ncias do requirements.txt."""
    logger.info(f"\nüì¶ Instalando depend√™ncias de {requirements_file}...")
    
    try:
        # Adiciona flag --upgrade se solicitado
        cmd = [sys.executable, "-m", "pip", "install", "-r", str(requirements_file)]
        if upgrade:
            cmd.append("--upgrade")
        
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
        )
        
        if result.returncode == 0:
            logger.info("‚úÖ Instala√ß√£o conclu√≠da com sucesso!")
            return True
        else:
            logger.error(f"‚ùå Erro ao instalar depend√™ncias.")
            logger.error(result.stderr)
            return False
    except Exception as e:
        logger.error(f"‚ùå Erro ao executar instala√ß√£o: {str(e)}")
        return False

def create_symlink():
    """Cria um link simb√≥lico para o script na pasta backend."""
    try:
        script_path = Path(__file__).resolve()
        backend_dir = script_path.parent / "backend"
        
        if not backend_dir.exists():
            logger.warning(f"‚ö†Ô∏è Diret√≥rio backend n√£o encontrado: {backend_dir}")
            return
        
        link_path = backend_dir / "check_dependencies.py"
        
        # Remove link existente se houver
        if link_path.exists():
            link_path.unlink()
        
        # Cria link simb√≥lico
        link_path.symlink_to(script_path)
        logger.info(f"‚úÖ Link simb√≥lico criado em {link_path}")
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar link simb√≥lico: {str(e)}")

def parse_args():
    """Analisa os argumentos da linha de comando."""
    parser = argparse.ArgumentParser(description="Gerenciador de depend√™ncias do CrossDebate")
    
    # Comandos principais
    group = parser.add_mutually_exclusive_group()
    group.add_argument("--check", action="store_true", help="Verificar depend√™ncias")
    group.add_argument("--install", action="store_true", help="Instalar depend√™ncias")
    group.add_argument("--test", action="store_true", help="Executar testes")
    group.add_argument("--symlink", action="store_true", help="Criar link simb√≥lico no diret√≥rio backend")
    group.add_argument("--minimal", action="store_true", help="Gerar arquivo de requisitos m√≠nimos")
    group.add_argument("--resolve-conflicts", action="store_true", help="Detectar e resolver conflitos de vers√£o")
    group.add_argument("--update", action="store_true", help="Atualizar arquivo requirements.txt")
    
    # Op√ß√µes adicionais
    parser.add_argument("--viz", action="store_true", help="Aplicar apenas para depend√™ncias de visualiza√ß√£o")
    parser.add_argument("--upgrade", action="store_true", help="Atualizar pacotes para vers√µes mais recentes")
    
    return parser.parse_args()

def show_command_help():
    """Exibe ajuda sobre os comandos dispon√≠veis."""
    logger.info("\nComandos dispon√≠veis:")
    logger.info("  python check_dependencies.py --check            # Verificar depend√™ncias")
    logger.info("  python check_dependencies.py --install          # Instalar todas as depend√™ncias")
    logger.info("  python check_dependencies.py --install --viz    # Instalar apenas depend√™ncias de visualiza√ß√£o")
    logger.info("  python check_dependencies.py --install --upgrade # Instalar e atualizar para vers√µes mais recentes")
    logger.info("  python check_dependencies.py --minimal          # Gerar arquivo de requisitos m√≠nimos")
    logger.info("  python check_dependencies.py --resolve-conflicts # Detectar e resolver conflitos de vers√£o")
    logger.info("  python check_dependencies.py --update           # Atualizar arquivo requirements.txt")
    logger.info("  python check_dependencies.py --test             # Executar testes")
    logger.info("  python check_dependencies.py --symlink          # Criar link simb√≥lico no diret√≥rio backend")

def main():
    """Fun√ß√£o principal."""
    args = parse_args()
    
    # Define o comportamento padr√£o se nenhum argumento for fornecido
    if not any([args.check, args.install, args.test, args.symlink, 
                args.minimal, args.resolve_conflicts, args.update]):
        args.check = True
    
    # Obt√©m os caminhos para os arquivos de requisitos
    root_dir = Path(__file__).parent
    req_file = root_dir / "requirements.txt"
    viz_req_file = root_dir / "requirements-viz.txt"
    minimal_req_file = root_dir / "requirements-minimal.txt"
    
    # Cria link simb√≥lico
    if args.symlink:
        create_symlink()
        return
    
    # Instala depend√™ncias
    if args.install:
        if args.viz:
            if not viz_req_file.exists():
                create_viz_requirements_file(viz_req_file)
            install_dependencies(viz_req_file, args.upgrade)
        else:
            # Verifica conflitos antes de instalar
            if args.upgrade:
                logger.info("Verificando conflitos de vers√£o antes da instala√ß√£o...")
                requirements = get_requirements(req_file)
                conflicts = analyze_version_conflicts(requirements)
                if conflicts:
                    resolutions = resolve_version_conflicts(conflicts)
                    update_requirements_file(req_file, resolutions)
            
            install_dependencies(req_file, args.upgrade)
            
            if viz_req_file.exists():
                install_option = input("\nDeseja instalar tamb√©m as depend√™ncias de visualiza√ß√£o? (s/N): ").lower()
                if install_option == 's':
                    install_dependencies(viz_req_file, args.upgrade)
        return
    
    # Apenas testes
    if args.test:
        run_tests()
        return
    
    # Gerar requisitos m√≠nimos
    if args.minimal:
        if not req_file.exists():
            logger.error(f"‚ùå Arquivo de requisitos n√£o encontrado: {req_file}")
            return
        create_minimal_requirements(req_file, minimal_req_file)
        return
    
    # Resolver conflitos de vers√£o
    if args.resolve_conflicts:
        if not req_file.exists():
            logger.error(f"‚ùå Arquivo de requisitos n√£o encontrado: {req_file}")
            return
        
        requirements = get_requirements(req_file)
        conflicts = analyze_version_conflicts(requirements)
        
        if conflicts:
            logger.info(f"\nEncontrados {len(conflicts)} conflitos de vers√£o:")
            for pkg, versions in conflicts.items():
                logger.info(f"  - {pkg}: {', '.join(versions)}")
            
            resolutions = resolve_version_conflicts(conflicts)
            update_requirements_file(req_file, resolutions)
        else:
            logger.info("\n‚úÖ Nenhum conflito de vers√£o encontrado.")
        return
    
    # Atualizar requirements.txt
    if args.update:
        if not req_file.exists():
            logger.error(f"‚ùå Arquivo de requisitos n√£o encontrado: {req_file}")
            return
        
        update_requirements_file(req_file)
        return
    
    # Verifica√ß√£o de depend√™ncias (comportamento padr√£o)
    logger.info("Verificando depend√™ncias do CrossDebate...")
    
    # Obt√©m requisitos e pacotes instalados
    requirements = get_requirements(req_file)
    installed_packages = get_installed_packages()
    
    # Verifica requisitos
    missing_packages = []
    for package_name, _ in requirements:
        normalized_name = package_name.replace("-", "_")
        if package_name not in installed_packages and normalized_name not in installed_packages:
            missing_packages.append(package_name)
            continue
        
        # Tenta importar o pacote
        if not check_import(normalized_name):
            alternative_name = normalized_name.split("_")[0]
            if not check_import(alternative_name):
                logger.warning(f"‚ö†Ô∏è Aviso: Pacote {package_name} est√° instalado mas n√£o pode ser importado.")
    
    # Relat√≥rio
    if missing_packages:
        logger.info("\n‚ùå Depend√™ncias ausentes:")
        for package in missing_packages:
            logger.info(f"  - {package}")
        
        # Verificar pacotes essenciais
        missing_core = [pkg for pkg in CORE_DEPENDENCIES if pkg.lower() in [p.lower() for p in missing_packages]]
        if missing_core:
            logger.warning("\n‚ö†Ô∏è Depend√™ncias essenciais ausentes:")
            for pkg in missing_core:
                logger.warning(f"  - {pkg}")
            
            logger.info("\nPara instalar apenas depend√™ncias essenciais:")
            logger.info(f"  python {__file__} --minimal")
            logger.info(f"  python {__file__} --install --minimal")
        
        logger.info("\nPara instalar todas as depend√™ncias:")
        logger.info(f"  python {__file__} --install")
    else:
        logger.info("\n‚úÖ Todas as depend√™ncias est√£o instaladas.")
    
    # Verifica√ß√£o espec√≠fica para bibliotecas de visualiza√ß√£o para AdvancedVisualization.js
    viz_libraries = ["plotly", "pandas", "numpy", "networkx", "vega", "altair"]
    missing_viz = [lib for lib in viz_libraries if lib.lower() not in installed_packages]
    
    if missing_viz:
        logger.info("\n‚ö†Ô∏è Bibliotecas de visualiza√ß√£o necess√°rias para js/visualization/AdvancedVisualization.js n√£o encontradas:")
        for lib in missing_viz:
            logger.info(f"  - {lib}")
        
        # Cria arquivo de requisitos de visualiza√ß√£o se n√£o existir
        if not viz_req_file.exists():
            create_viz_requirements_file(viz_req_file)
            
        logger.info(f"\nPara instalar: python {__file__} --install --viz")
    else:
        logger.info("\n‚úÖ Todas as bibliotecas de visualiza√ß√£o est√£o instaladas.")
    
    # Verificar conflitos de vers√£o
    conflicts = analyze_version_conflicts(requirements)
    if conflicts:
        logger.warning(f"\n‚ö†Ô∏è Encontrados {len(conflicts)} potenciais conflitos de vers√£o.")
        logger.info(f"Para resolver: python {__file__} --resolve-conflicts")
    
    # Mostra comandos dispon√≠veis
    show_command_help()

if __name__ == "__main__":
    main()
